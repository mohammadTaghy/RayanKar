// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Api.BDDTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateReadeEditAndDeleteCutomerFeature : object, Xunit.IClassFixture<CreateReadeEditAndDeleteCutomerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CustomerManager.feature"
#line hidden
        
        public CreateReadeEditAndDeleteCutomerFeature(CreateReadeEditAndDeleteCutomerFeature.FixtureData fixtureData, Api_BDDTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Create, Reade, Edit and Delete Cutomer", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Description"});
            table1.AddRow(new string[] {
                        "500",
                        "validation error"});
#line 4
 testRunner.Given("system errors code are folowing", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create, Reade, Edit and Delete Cutomer")]
        [Xunit.TraitAttribute("FeatureTitle", "Create, Reade, Edit and Delete Cutomer")]
        [Xunit.TraitAttribute("Description", "Create, Reade, Edit and Delete Cutomer")]
        public void CreateReadeEditAndDeleteCutomer()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create, Reade, Edit and Delete Cutomer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 10
 testRunner.Given("Exist \"0\" customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table2.AddRow(new string[] {
                            "John",
                            "Doe",
                            "john@doe.com",
                            "+989121234567",
                            "01-JAN-2000",
                            "IR830120010000001387998021"});
#line 11
 testRunner.When("user want to create a customer by below data by sending \"Create Customer Command\"" +
                        "", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table3.AddRow(new string[] {
                            "John",
                            "Doe",
                            "john@doe.com",
                            "+989121234567",
                            "01-JAN-2000",
                            "IR830120010000001387998021"});
#line 14
 testRunner.Then("user can filter customers by follow data and get \"1\" data", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table4.AddRow(new string[] {
                            "John",
                            "doe",
                            "john@doe.com",
                            "+989121234567",
                            "01-JAN-2000",
                            "IR830120010000001387998021"});
#line 17
 testRunner.When("user want to create a customer by below data by sending \"Create Customer Command\"" +
                        "", ((string)(null)), table4, "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code"});
                table5.AddRow(new string[] {
                            "500"});
#line 20
 testRunner.Then("user must receive error codes", ((string)(null)), table5, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table6.AddRow(new string[] {
                            "Jane",
                            "William",
                            "jane@william.com",
                            "+31612345678",
                            "01-FEB-2010",
                            "IR720550012870106395265001"});
#line 23
 testRunner.When("user edit customer with new data", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table7.AddRow(new string[] {
                            "John",
                            "Doe",
                            "john@doe.com",
                            "+989121234567",
                            "01-JAN-2000",
                            "IR830120010000001387998021"});
#line 26
 testRunner.Then("user can filter customers by follow data and get \"0\" data", ((string)(null)), table7, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "DateOfBirth",
                            "BankAccountNumber"});
                table8.AddRow(new string[] {
                            "Jane",
                            "William",
                            "jane@william.com",
                            "+31612345678",
                            "01-FEB-2010",
                            "IR720550012870106395265001"});
#line 29
 testRunner.And("user can filter customers by follow data and get \"1\" data", ((string)(null)), table8, "And ");
#line hidden
#line 32
 testRunner.When("user delete customer with email of \"jane@william.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("user can query to get all customers and get \"0\" records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateReadeEditAndDeleteCutomerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateReadeEditAndDeleteCutomerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
